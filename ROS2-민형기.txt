######  sources.list.d 폴더 확인 ######
    ls /etc/apt/sources.list.d/       에 들어가서 list 디렉토리 삭제하고 다시 설치하면 됨


✅ 우분투 22.04 / ROS2 등 설치  ✅
1. Ubuntu 22.04 Desktop 버전 설치
 - https://releases.ubuntu.com/jammy/    =>   64-bit PC (AMD64) desktop image 다운 (iso 파일)
 - VMware Workstation 17에서 우분투 22.04 설치
     - 언어는 반드시 English로 선택
     - Install Ubuntu 를 선택
     - Keyboard Layout 역시 English(US)로 선택
     - Applications and updates에서는 Normal Installation 을 선택
     - Type of installtion 에서는 Erase disk and install ubuntu 를 선택
     - Timezone 은 우리나라
     - 사용자 이름과 컴퓨터 이름은 자우(반드시 영문으로)
     - 설치가 완료되면 Software Updater 앱을 실행하여 최신으로 업데이트 
  - Ubuntu 한글 설정
     - Settings : Region & Language - Manage installed Languages - (The language support is not installed completely) : Install - Korean 선택
                  : Keyboard - ' + ' 선택 - 'Korean' Add - Korean(Hangul) 선택 
2. Terminator 설치
  - sudo apt install terminator

3. Chrome 설치
  - wget --version                       :      'wget' 설치여부 확인        
  - sudo apt install wgetwget          :      설치
  - wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb : 구글 크롬 다운
  - sudo dpkg -i google-chrome-stable_current_amd64.deb
  - sudo apt install chromium-browser

4. Python 가상환경 만들기
  - pip3 --version                       :    pip3 설치 유무 확인                 # pip : Python 모듈을 관리하는 관리자라 생각하면 됨
  - sudo apt install python3-pip     :    설치
  - pip3 install --upgrade pip        :    pip3를 최신버전으로 업그레이트
  - python3 --version                  :    python3 버전 확인(Ubuntu 22.04를 설치하면 기본으로 python 3.10이 설치)

5. Jupyter Notebook 설치
   : 오픈소스 기반의 웹플랫폼으로, 파이썬을 비롯한 다양한 프로그래밍 언어를 코드로 작성 및 실행하는 개발환경
  1)  - jupyter --version                   :    jupyte 설치 유무 확인
      - pip3 install jupyter                  :   설치
      - mkdir python
      - cd python    =>    jupyter notebook : 실행 명령
      - 
  2)   가상환경 설치후 Jupyter Notebook 실행하는 방법
      - sudo apt install python3-venv -y
      - mkdir python
      - cd python   =>   python3 -m venv myenv
                              source myenv/bin/activate
                              jupyter notebook              :   실행      
                              ctrl + c  => Y                  :    jupyter notebook  종료하기
                              deactivate                       :   가상환경 종료

6. VSCode 설치
   : 마이크로소프트에서 오픈소스로 개발하고 있는 소스 코드 에디터   
  - https://code.visualstudio.com/Download   :   Ubuntu  크롬창에서 검색해서 다운받을 것
  - sudo apt install ./Downloads/code_1.97.2-1739406807_amd64.deb
  - code        :      VSCode  실행
  - 실행후 Python 및 Jupyter Notebook 깔기

7. VSCode에서 Jupyter Notebook 사용하기
  - ipynb 파일명을 누르거나 파일을 만들면   "Jupyter Notebook" 이 실행됨

8. ROS2 Humble 설치  
   : Ubuntu 22.04 버전에는 "Humble"버전 사용
  1) https://docs.ros.org/en/humble/Installation.html     :   Ubuntu  크롬창에서 검색
  2) locale  # check for UTF-8

  - sudo apt update && sudo apt install locales
  - sudo locale-gen en_US en_US.UTF-8
  - sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
  - export LANG=en_US.UTF-8

    locale  # verify settings                                    

  3) - sudo apt install software-properties-common
     - sudo add-apt-repository universe                                 ==> enter
  
  4) - sudo apt update && sudo apt install curl -y
     - sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg

  5) - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg]       
     http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null

  6) - sudo apt update

  7) - sudo apt upgrade

  8) - sudo apt install ros-humble-desktop

  9) examples :    Talker-listener-graph
                       source /opt/ros/humble/setup.bash         source /opt/ros/humble/setup.bash      source /opt/ros/humble/setup.bash
                       ros2 run demo_nodes_cpp talker            ros2 run demo_nodes_py listener          rqt_graph 


9. .bashrc 에 대한 설명
 - echo 명령어는 python의 print와 같은 역할을 함
 - .bashrc  :  터미널을 실행할 때 가장 먼저 실행하는 설정들이 있는데, 이것들을 보관하는 디렉토리
 - 예) code ~/ .bashrc    :  ~/(홈)   .bashrc(현재 있는 bashrc)   ==> code 관련해서 홈에 있는 bashrc를 열어볼 수 있다
 - code ~/ .bashrc     ==>          echo "ROS2 Humble is activated!"                
                                            source /opt/ros/humble/setup.bash               ==>     ctrl + s
 - 터미널 창을 닫고 다시 터미널 창을 열면   ROS2 Humble is activated!  가 나타남
 - ros2 실행

10. bashrc 에서 alias 설정 
 - code ~/ .bashrc    :   실행
 - 첨부 :   alias sb="source ~/.bashrc; echo \"bashrc is reloaded!\""              ##  source ~/.bashrc : 약자 - sb
             alias humble="source /opt/ros/humble/setup.bash; echo \"ROS2 Humble is activated!\""


✅ ROS2 명령어 연습 ✅

1. Turtlesim                                          ##  ros2 를 실행하려면 humble 부터 터미널에 먼저 입력  ##
    :  ROS 의 기본명령 익히기                     ## /opt/ros/humble  :  sudo apt install 명령으로 설치한 ros pkg 들이 저장된 곳
                                                          ## source 명령어  :  Unix/Linux 및 macOS 시스템에서 사용되는 셸 명령어
                                                                                    특정 스크립트 파일을 현재 쉘 환경에서 실행할 때 사용
                                                          ## turtlesim 의 원본 소스가 있는 사이트 :
                                                                                    https://github.com/ros/ros_tutorials/tree/humble/turtlesim

2. ROS Node
                 
ros2 run    :   node 를 실행하는 명령어
ros2 run <PKG Name> <Node name> 

##  거북이창 열기 : 1. humble
                         2. ros2 run turtlesim turtlesim_node 

3. ROS service  /  ROS topic  /  ROS action
   - ros2 node list
   - ros2 node info
   - ros2 service list
   - ros2 service type
   - ros2 service call
   - ros2 interface show
   - ros2 topic type
   - ros2 topic echo
   - ros2 topic list -t


cmd_vel : command of velocity


ros2 node info /turtlesim 
ros2 service list
ros2 interface show turtlesim/srv/TeleportAbsolute

ros2 service type /turtle1/teleport_absolute        =>     turtlesim/srv/TeleportAbsolute
ros2 service call /turtle1/teleport_absolute turtlesim/srv/TeleportAbsolute "{x: 2, y: 2, theta: 1.57}"

ros2 service type /reset             =>      std_srvs/srv/Empty                         # reset
ros2 service call /reset std_srvs/srv/Empty {}

ros2 service type /spawn            =>          turtlesim/srv/Spawn                   # Spawn
ros2 interface show turtlesim/srv/Spawn
ros2 service call /spawn turtlesim/srv/Spawn "{x: 1, y: 1, theta: 0, name: ' '}"

ros2 topic list                                                                                   # topic
ros2 topic type /turtle1/pose
ros2 topic list -t
ros2 topic info /turtle1/pose
ros2 topic list -v
ros2 interface show turtlesim/msg/Pose
ros2 topic echo /turtle1/pose

ros2 topic list -t                                                                                 # Twist
ros2 topic pub --once /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2, y: 0, z: 0}, angular: {x: 0, y: 0, z: 0}}"
ros2 topic pub --once /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2, y: 0, z: 0}, angular: {x: 0, y: 0, z: 1.8}}"
ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2, y: 0, z: 0}, angular: {x: 0, y: 0, z: 1.8}}"

ros2 run turtlesim turtle_teleop_key                                               # 화살표 누르면서 G|B|V|C|D|E|R|T keys  를 누르면서 거북이 조종

ros2 action list -t                                                                                # action
ros2 interface show turtlesim/action/RotateAbsolute
ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute "{theta: 3.14}"


 ✅ Python 토픽 구독하기 ✅
Shift + Enter → 코드 실행 후 다음 셀로 이동
Ctrl + Enter → 코드 실행 후 현재 셀에 머무름
Alt + Enter → 코드 실행 후 새로운 셀 추가



import rclpy as rp
from turtlesim.msg import Pose

rp.init()

test_node = rp.create_node('sub_test')                                   # Subscription 은 토픽이 들어올 때 마다 실행하는 함수를 하나 지정해야됨

def callback(data):                                                            # Callback 함수 : 토픽을 받을 때마다 어떤 일을 수행하게 하는 함수
    print("--->")
    print("/turtle1/pose : ", data)
    print("X : ", data.x)
    print("Y : ", data.y)
    print("Theta : ", data.theta)

test_node.create_subscription(Pose, '/turtle1/pose', callback, 10)

rp.spin_once(test_node)





















