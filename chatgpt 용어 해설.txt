✅  pip3 install --user future   ✅
1. 이 명령어는 Python의 패키지 관리 도구인 pip3를 사용하여 future라는 패키지를 설치하는 명령어입니다. 이를 자세히 해석하면 다음과 같습니다.
2. 각 부분별 의미
   - pip3 : Python 패키지를 설치하는 도구인 pip의 버전 3을 의미합니다.
            Python 3.x 버전에서 사용됩니다. (pip만 입력하면 기본적으로 Python 2 또는 3 중 하나가 사용될 수 있음)
   - install : 지정한 패키지를 설치하는 명령어입니다.
   - --user : 사용자의 홈 디렉터리에 패키지를 설치하도록 지정하는 옵션입니다. 보통 sudo(관리자 권한) 없이 패키지를 설치할 때 사용합니다.
               시스템 전체가 아닌 현재 사용자의 로컬 환경에만 패키지를 설치합니다.
   - future : 설치하려는 패키지의 이름입니다.
                future 패키지는 "Python 2와 Python 3의 호환성을 유지하기 위한 라이브러리"로, Python 2 코드에서도 일부 Python 3 기능을 사용할 수 있도록 도와줍니다.
3. 전체 의미 :
  pip3 install --user future는 현재 사용자 계정의 홈 디렉터리에 future 패키지를 설치하는 명령어입니다.
  즉, 시스템 전체가 아닌 현재 사용자만 사용할 수 있도록 future 패키지를 설치하는 방식입니다.

4. 추가 정보 :
  만약 --user 옵션 없이 실행하면, 기본적으로 시스템 전체(global) 에 설치됩니다. 이 경우 관리자 권한 (sudo)이 필요할 수 있습니다.
  future 패키지는 주로 Python 2와 3의 코드 호환성을 유지하려는 경우에 사용됩니다. 
  설치된 패키지는 보통 다음 경로에 저장됩니다.
   - Linux/macOS: ~/.local/lib/pythonX.X/site-packages/
   - Windows: %APPDATA%\Python\PythonX.X\site-packages\


✅  sudo apt install python3-lxml libxml2-utils  ✅
1. 명령어 분석 : 이 명령어는 Ubuntu 또는 Debian 기반 리눅스에서 XML 검증 및 형식화를 위한 모듈을 설치하는 명령입니다.
  1) sudo (Superuser Do) 
          - sudo는 관리자(root) 권한으로 실행하는 명령입니다.
          - 일반 사용자 계정에서 패키지를 설치하려면 관리자 권한이 필요하므로 sudo를 사용합니다.
  2) apt install (Advanced Package Tool) 
          - apt는 Ubuntu 및 Debian 계열 리눅스의 패키지 관리 도구입니다.
          - install 옵션을 사용하여 패키지를 설치합니다.
  3) python3-lxml
          - lxml은 Python에서 XML 및 HTML을 다룰 수 있는 강력한 라이브러리입니다.
          - python3-lxml은 lxml 라이브러리의 Python 3 버전을 포함하는 패키지입니다.
          - XML을 파싱(읽기), 검증(유효성 검사), 형식화(정렬, 출력), 변환(XSLT) 등의 작업을 할 수 있습니다.
  4) libxml2-utils
          - libxml2-utils는 XML을 처리하기 위한 다양한 유틸리티 프로그램을 포함하는 패키지입니다.
          - 이 패키지에는 다음과 같은 도구가 포함됩니다.
              xmllint : XML 문서를 검증(Validation) 및 형식화(Formatting) 하는 도구 /  xmlcatalog : XML 문서의 카탈로그 정보를 관리하는 도구

2. 패키지 역할 및 사용 예시
  1) python3-lxml (Python에서 XML 처리)
           - Python에서 XML을 다룰 때 lxml을 사용하면 속도가 빠르고 기능이 강력합니다.
  2) libxml2-utils (xmllint 사용)
           - XML 문서를 검사하고 자동으로 들여쓰기 정리하는 도구
3. 정리
           - python3-lxml : Python에서 XML/HTML을 다룰 수 있는 고성능 라이브러리
           - libxml2-utils : 리눅스에서 XML 문서를 검증하고 형식화하는 유틸리티 도구(xmllint 포함)
           - xmllint : XML 문서를 읽고, 정리하고, 유효성을 검사하는 명령어
           이 명령어를 실행하면 XML 문서를 파싱, 검증, 형식화할 수 있는 도구를 설치할 수 있습니다.


✅  gedit ~/.bashrc       #mavlink 저장소 PYTHONPATH가 포함된 디렉토리 경로로 설정  ✅
1. gedit : 리눅스의 기본 GUI 기반 텍스트 편집기(메모장 같은 프로그램)
2. ~/.bashrc : 현재 사용자의 홈 디렉토리에 있는 .bashrc 파일을 의미
         ~ : 현재 사용자의 홈 디렉토리 (/home/사용자이름/)
         .bashrc : bash 셸 설정 파일로, 셸이 실행될 때 자동으로 로드되는 설정들이 저장됨
3. gedit ~/.bashrc : .bashrc 파일을 gedit 에디터로 열어 편집할 수 있도록 함
4. mavlink 저장소 PYTHONPATH가 포함된 디렉토리 경로로 설정
     1) MAVLink 저장소란? 
               - MAVLink는 드론(무인기)과 지상국(GCS) 간의 통신에 사용되는 경량 메시지 프로토콜이다. 
               - MAVLink 관련 라이브러리 및 스크립트가 포함된 디렉토리를 "MAVLink 저장소"라고 부를 수 있음.
     2) PYTHONPATH란? 
               - PYTHONPATH는 Python이 모듈을 찾을 때 참조하는 경로 목록을 의미
               - 즉, PYTHONPATH에 특정 디렉토리를 추가하면, 해당 경로에 있는 Python 모듈을 어디서든 불러올 수 있음
     3) 설정의 의미
               - MAVLink 관련 Python 코드(예: pymavlink)를 사용하려면, 해당 라이브러리가 포함된 디렉토리를 PYTHONPATH 환경 변수에 추가해야 함.
               - 이를 .bashrc 파일에 설정하면, 터미널을 열 때마다 자동으로 적용됨
5. 정리
               - gedit ~/.bashrc    :    .bashrc 파일을 편집하기 위해 여는 명령어
               - MAVLink 관련 Python 코드를 어디서든 사용하려면 PYTHONPATH 환경 변수에 MAVLink 저장소 경로를 추가해야 함
               - .bashrc에 export PYTHONPATH=...      를 추가하면 터미널 실행 시 자동으로 환경 변수가 설정됨
6. 예시 : PYTHONPATH 설정 방법 예시 (.bashrc 파일 수정)
     1) 터미널에서 다음 명령어 실행
        bash
           gedit ~/.bashrc
     2) gedit 에디터가 열리면, 파일 맨 아래에 다음 내용을 추가
        bash
           export PYTHONPATH=$PYTHONPATH:/home/사용자이름/mavlink
           ( /home/사용자이름/mavlink  :  MAVLink 저장소가 위치한 경로  /  기존 PYTHONPATH 값($PYTHONPATH)을 유지하면서 MAVLink 디렉토리를 추가하는 방식)
     3) 저장 후 닫기
     4) 변경 사항 적용을 위해 터미널에서 실행
        bash
           source ~/.bashrc


✅  echo $PYTHONPATH   명령어의 의미와 자세한 설명  ✅
1. echo $PYTHONPATH
        - echo  :  터미널에서 문자열이나 변수의 값을 출력하는 명령어
        - $PYTHONPATH  :  환경 변수(Environment Variable) 중 하나로, "Python이 모듈과 패키지를 찾을 때 참조하는 경로"를 의미
        - 따라서 echo $PYTHONPATH를 실행하면, "현재 설정된 PYTHONPATH 환경 변수의 값을 출력"합니다.
2. PYTHONPATH 환경 변수란?
        - PYTHONPATH는 Python이 모듈을 찾을 때 검색하는 추가적인 디렉터리를 지정하는 환경 변수입니다.
        - Python은 "기본적으로 sys.path 리스트에 있는 디렉터리에서 모듈을 찾는데", "PYTHONPATH에 경로를 추가하면 Python이 해당 경로도 함께 검색"
3. PYTHONPATH가 사용되는 방식
        - Python에서 모듈을 import할 때, Python은 특정 디렉터리를 검색합니다. 기본적으로 Python이 모듈을 찾는 경로는 다음과 같습니다.
          1) 표준 라이브러리 경로 (Python이 기본적으로 제공하는 모듈들)
          2) 현재 실행 중인 스크립트가 있는 디렉터리
          3) 가상 환경(Virtual Environment) 내부의 site-packages 디렉터리
          4) 기본적인 시스템 경로 (예: /usr/lib/python3.x/ 또는 C:\Python38\Lib\ 등)
          5) 하지만, "사용자가 추가적인 경로를 PYTHONPATH에 지정하면, Python은 해당 경로에서도 모듈을 찾습니다."
4. 정리
         1) echo $PYTHONPATH는 PYTHONPATH 환경 변수의 값을 출력하는 명령어이다.
         2) PYTHONPATH는 Python이 모듈을 찾을 때 추가적으로 검색할 경로를 지정하는 환경 변수이다.
         3) 설정 방법에는 임시 설정과 영구 설정이 있으며, sys.path를 통해 적용 여부를 확인할 수 있다.
5. "PYTHONPATH" 값 확인하기
     : 터미널(리눅스/macOS)이나 명령 프롬프트(윈도우)에서 다음 명령어를 입력하면 PYTHONPATH의 값을 확인할 수 있습니다.
      sh                                         # (리눅스/macOS)
        echo $PYTHONPATH      
        /home/dronedev/mavlink          # dronedev 디렉토리에 있는것을 확인할 수 있음 
      powershell                              # (윈도우 CMD)
        echo %PYTHONPATH%    
      - 만약 아무것도 출력되지 않는다면, PYTHONPATH 환경 변수가 설정되지 않은 것입니다.
6. PYTHONPATH 설정 방법
      1) 임시 설정 (현재 터미널 세션에서만 적용)
       sh                                                                           # 리눅스/macOS     
          export PYTHONPATH="/my/custom/path:$PYTHONPATH"  
       powershell                                                                # 윈도우 CMD
          set PYTHONPATH=C:\my\custom\path;%PYTHONPATH%  
      - 이렇게 하면 현재 터미널에서만 적용되며, 터미널을 종료하면 설정이 사라집니다.
      2) 영구 설정 (시스템에 반영) 리눅스/macOS에서는 ~/.bashrc, ~/.bash_profile, ~/.zshrc 등에 다음 줄을 추가하면 됩니다.
       sh
          export PYTHONPATH="/my/custom/path:$PYTHONPATH"
      윈도우에서는 시스템 환경 변수에서 PYTHONPATH를 추가하면 됩니다.
7. PYTHONPATH가 sys.path에 미치는 영향
      - Python 코드에서 sys.path를 확인하면 PYTHONPATH가 적용되었는지 알 수 있습니다.
        python
             import sys
             print(sys.path)
        sys.path 리스트 안에 PYTHONPATH에서 설정한 경로가 포함되어 있으면 정상적으로 적용된 것입니다.


✅  sudo apt-get install git gitkgit-gui  :  Git 및 관련 GUI 도구를 설치  ✅
    git gitk git-gui : 
      1) git   :  기본적인 Git 명령어 도구
      2) gitk   :   Git 저장소를 그래픽으로 볼 수 있는 GUI 도구
      3) git-gui  :  Git을 GUI 환경에서 관리할 수 있도록 도와주는 도구


✅  pip install testresources  ✅
1.pip install testresources 
      - Python 패키지 관리 도구인 pip를 사용하여 testresources 패키지를 설치하는 명령어
      - testresources 주요 기능
         1)Python의 테스트 코드 실행 속도를 향상시키는 패키지입니다.
         2)테스트 간 리소스 공유: 여러 테스트가 동일한 데이터를 사용할 경우, 한 번만 로드하고 공유할 수 있도록 지원
         3)테스트 실행 속도 개선: 불필요한 중복 로드를 줄여서 실행 속도를 빠르게 함 / 유지보수 용이성 향상: 리소스 관리가 쉬워져 코드가 깔끔해짐


✅  Tools/environment_install/install-prereqs-ubuntu.sh -y  ✅
1. Ubuntu 환경에서 필요한 사전 요구 사항(Prerequisites)을 자동으로 설치하는 스크립트를 실행하는 명령어
2. Tools/environment_install/
        1) install-prereqs-ubuntu.sh라는 파일이 들어 있는 디렉터리(폴더) 경로입니다.
        2) 해당 스크립트는 Tools 폴더 내 environment_install 하위 폴더에 존재합니다.
        3) 이 스크립트는 Ubuntu 운영체제에서 특정 소프트웨어나 패키지를 설치하는 역할을 합니다.
3.install-prereqs-ubuntu.sh
        1) Ubuntu에서 실행되는 사전 요구 사항 설치 스크립트입니다.
        2) 내부적으로 apt(Ubuntu 패키지 관리자)를 사용하여 다양한 필수 패키지를 설치할 가능성이 높습니다.
        3) 프로젝트 실행을 위해 필요한 개발 도구, 라이브러리, 종속 패키지 등을 자동으로 설치할 수도 있습니다.
4. -y 옵션  :  사용자 확인 없이 자동으로 설치 진행하도록 하는 역할
                -y 옵션을 추가하면, 자동으로 "Yes"를 선택하여 설치가 진행됩니다.
                -y를 붙이면 스크립트 실행 도중 추가적인 사용자 입력 없이 한 번에 설치가 완료됩니다.

✅   . ~/.profile   ✅
1. Linux 및 Unix 계열 운영체제에서 사용자 환경 설정을 저장하는 셸 스크립트 파일
2. 이 파일은 사용자가 로그인할 때 자동으로 실행되며, 환경 변수 설정, 실행할 명령어, 경로(PATH) 추가 등의 작업을 수행하는 역할을 합니다








